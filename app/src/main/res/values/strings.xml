<resources>
    <string name="app_name">uts_dandisuagira</string>
    <string name="tekber">TEKNOLOGI BERGERAK</string>
    <string name="sisfo">UJIAN TENGAH SEMESETER</string>
    <string name="kembali">Kembali</string>
    <string name="syntax">Contoh Syntax</string>
    <string name="link">Link Materi</string>
    <string name="menu">Menu Utama</string>

    <string name="syntax1">Contoh Syntax Aktiviitas </string>
    <string name="syntax2">Contoh Syntax Layanan </string>
    <string name="syntax3">Contoh Syntax Penerima Siaran </string>
    <string name="syntax4">Contoh Syntax Penyedia Materi </string>
    <string name="syntax5">Contoh Syntax Intent </string>
    <string name="scroll">Scroll Untuk Melihat Gambar </string>

    <string name="komponen1">Aktivitas</string>
    <string name="komponen2">Layanan</string>
    <string name="komponen3">Penerima Siaran</string>
    <string name="komponen4">Penyedia Materi</string>
    <string name="komponen5">Intent</string>

    <string name="isi1">
        <br>Aktivitas adalah titik masuk untuk berinteraksi dengan pengguna. Ini mewakili satu layar dengan antarmuka pengguna. Misalnya, aplikasi email mungkin memiliki satu aktivitas yang menampilkan daftar email baru, aktivitas lain untuk menulis email, dan aktivitas satunya lagi untuk membaca email. Walaupun semua aktivitas bekerja sama untuk membentuk pengalaman pengguna yang kohesif dalam aplikasi email, masing-masing tidak saling bergantung. Karenanya, aplikasi berbeda bisa memulai salah satu aktivitas ini (jika aplikasi email mengizinkannya). Misalnya, aplikasi kamera bisa memulai aktivitas dalam aplikasi email yang membuat email baru agar pengguna bisa berbagi gambar. Aktivitas mempermudah interaksi penting berikut di antara sistem dan aplikasi: </br> \n\n

        <br>1.Tetap memantau apa yang penting bagi pengguna saat ini (apa yang ada di layar) untuk memastikan bahwa sistem tetap menjalankan proses yang menjadi host aktivitas.</br>
        <br>2.Memahami proses yang digunakan sebelumnya berisi sesuatu yang dapat dikembalikan pengguna (aktivitas yang dihentikan), jadi lebih memprioritaskan mempertahankan proses tersebut. </br>
        <br>3.Membantu menangani aplikasi menghentikan prosesnya sehingga pengguna dapat kembali ke aktivitas dengan status sebelumnya yang dipulihkan. </br>
        <br>4.Memberikan cara bagi aplikasi untuk menerapkan alur antar pengguna, dan bagi sistem untuk mengoordinasikan alur ini. (Contoh yang paling klasik sedang dibagikan di sini).</br>
    Anda menerapkan aktivitas sebagai subclass dari class Activity. Untuk informasi selengkapnya tentang class Activity, lihat panduan developer Aktivitas.
    </string>

    <string name="isi2">
        <br>Layanan adalah titik masuk serbaguna untuk menjaga aplikasi tetap berjalan di latar belakang bagi semua jenis alasan. Ini adalah komponen yang berjalan di latar belakang untuk melakukan operasi yang berjalan lama atau untuk melakukan pekerjaan bagi proses jarak jauh. Layanan tidak menyediakan antarmuka pengguna. Misalnya, sebuah layanan bisa memutar musik di latar belakang sementara pengguna berada dalam aplikasi lain, atau layanan bisa menarik data lewat jaringan tanpa memblokir interaksi pengguna dengan aktivitas. Komponen lain, seperti aktivitas, bisa memulai layanan dan membiarkannya berjalan atau mengikat layanan untuk berinteraksi dengannya. Sebenarnya ada dua layanan semantik berbeda yang memberi tahu sistem tentang cara mengelola aplikasi: Layanan yang dimulai memberi tahu sistem agar tetap berjalan hingga pekerjaannya selesai. Hal ini bisa jadi untuk menyinkronkan beberapa data di latar belakang atau memutar musik meskipun setelah pengguna meninggalkan aplikasi tersebut. Menyinkronkan data di latar belakang atau memutar musik juga mewakili dua jenis layanan dimulai yang berbeda, yang memodifikasi bagaimana sistem menanganinya:</br> \n\n


        <br>1. Pemutaran musik adalah sesuatu yang disadari secara langsung oleh pengguna, jadi aplikasi tersebut memberi tahu sistem dengan mengatakan ingin berjalan di latar depan dengan notifikasi untuk memberi tahu pengguna tentang hal ini; dalam kasus ini sistem memahami bahwa harus benar-benar berusaha keras untuk menjaga proses layanan itu tetap berjalan, karena pengguna akan merasa tidak senang jika layanan itu hilang.</br>
        <br>2. Layanan latar belakang regular bukanlah sesuatu yang disadari pengguna secara langsung sebagai layanan yang berjalan, jadi sistem tersebut memiliki kebebasan lebih dalam mengelola prosesnya. Layanan ini mungkin diperbolehkan untuk dimatikan (lalu memulai ulang nanti) jika layanan ini memerlukan RAM untuk hal yang lebih penting bagi pengguna.</br>

        <br>Layanan terikat berjalan karena beberapa aplikasi lain (atau sistem) dikatakan ingin menggunakan layanan tersebut. Pada dasarnya ini adalah layanan yang menyediakan API untuk proses lain. Dengan demikian sistem tersebut mengetahui adanya ketergantungan antar proses-proses ini, jadi jika proses A terikat ke layanan dalam proses B, proses A tahu bahwa harus mempertahankan proses B (beserta layanannya) agar tetap berjalan. Lebih lanjut, jika proses A adalah sesuatu yang dianggap penting bagi pengguna, maka proses A tersebut paham untuk memperlakukan proses B sebagai sesuatu yang juga dianggap penting bagi pengguna. Oleh karena fleksibilitasnya (baik atau buruk), layanan telah menjadi blok bangunan yang benar-benar berguna bagi semua jenis konsep sistem dengan level lebih tinggi. Wallpaper animasi, listener notifikasi, screen saver, metode masukan, layanan aksesibilitas, dan berbagai fitur sistem inti yang lain dibangun sebagai layanan yang menerapkan aplikasi dan mengikat sistem saat harus dijalankan.</br>

        Suatu layanan diterapkan sebagai subclass Service. Untuk informasi selengkapnya tentang class Service, lihat panduan developer Layanan.
    </string>

    <string name="isi3">
        <br> Penerima siaran adalah komponen yang memungkinkan sistem menyampaikan kejadian di luar alur pengguna regular, menjadikan aplikasi tersebut dapat merespons pengumuman siaran seluruh sistem. Oleh karena penerima siaran adalah entri yang didefinisikan dengan baik ke dalam aplikasi, sistem dapat mengirimkan siaran meskipun ke aplikasi yang saat ini tidak berjalan. Jadi, misalnya, suatu aplikasi dapat menjadwalkan alarm untuk mengirimkan notifikasi agar pengguna tahu tentang acara yang akan datang... dan dengan mengirimkan alarm tersebut ke Penerima Siaran aplikasi, aplikasi tersebut tidak perlu untuk tetap berjalan hingga alarm mati. Banyak siaran berasal dari sistemâ€”misalnya, siaran yang mengumumkan bahwa layar sudah dimatikan, baterai lemah, atau gambar sudah diambil. Aplikasi juga dapat mengawali siaranâ€”misalnya, untuk memberi tahu aplikasi lain bahwa beberapa data sudah didownload ke perangkat dan tersedia untuk digunakan. Walaupun penerima siaran tidak menampilkan antarmuka pengguna, penerima bisa membuat notifikasi bilah status untuk memberi tahu pengguna kapan kejadian siaran dilakukan. Meskipun penerima siaran umumnya cuma menjadi gerbang untuk komponen lain dan dimaksudkan untuk melakukan pekerjaan dalam jumlah sangat minim. Misalnya, mungkin dijadwalkan JobService melakukan beberapa pekerjaan berdasarkan acara dengan JobScheduler </br>  \n\n

        <br>Penerima siaran diimplementasikan sebagai subclass BroadcastReceiver dan setiap siaran dikirim sebagai objek Intent. Untuk informasi selengkapnya, lihat class BroadcastReceiver.</br>
    </string>

    <string name="isi4">
        <br>Penyedia materi mengelola set data aplikasi secara bersama-sama, yang dapat Anda simpan di sistem file, di database SQLite, di web, atau di lokasi penyimpanan persisten lain yang dapat diakses aplikasi Anda. Melalui penyedia materi, aplikasi lain bisa melakukan kueri atau memodifikasi data jika penyedia materi mengizinkannya. Misalnya, sistem Android menyediakan penyedia materi yang mengelola informasi kontak pengguna. Karenanya, setiap aplikasi dengan izin yang sesuai bisa melakukan kueri mengenai bagian dari penyedia materi, seperti ContactsContract.Data, untuk membaca dan menulis informasi tentang orang tertentu. Aplikasi ini membujuk agar memikirkan penyedia konten sebagai abstraksi di database, karena terdapat banyak API dan dukungan dibuat untuk kasus umum tersebut. Namun demikian, penyedia konten memiliki beragam tujuan inti untuk perspektif desain-sistem. Bagi sistem, penyedia konten adalah titik masuk ke dalam suatu aplikasi untuk memublikasikan item data bernama, yang diidentifikasi oleh skema URI. Jadi sebuah aplikasi dapat memutuskan bagaimana ia ingin memetakan data yang ada di dalamnya ke ruang nama URI, membagikan URI tersebut ke entitas lain yang dapat menggunakannya guna mengakses data. Ada beberapa hal tertentu yang dapat dilakukan sistem dalam mengelola sebuah aplikasi:</br>

        1. Menetapkan URI tidak mengharuskan aplikasi tetap berjalan, sehingga URI dapat terus ada setelah aplikasi yang memilikinya keluar. Sistem hanya perlu memastikan bahwa aplikasi yang memilikinya masih berjalan saat harus mengambil data aplikasi tersebut dari URI yang terkait.
        2. URI ini juga menyediakan model keamanan halus yang penting. Misalnya, sebuah aplikasi dapat menempatkan URO untuk gambar yang ada di papan klip, namun membiarkan penyedia kontennya terkunci sehingga aplikasi lain tidak dapat mengaksesnya secara bebas. Apabila aplikasi kedua berupaya mengakses URI tersebut di papan klip, sistem dapat mengizinkan aplikasi tersebut untuk mengakses data melalui pemberian izin URI sementara sehingga diizinkan mengakses data hanya di belakang URI tersebut, namun tidak ada data lainnya di aplikasi kedua itu.
        Penyedia materi juga berguna untuk membaca dan menulis data privat ke aplikasi Anda dan tidak dibagikan.

        Penyedia materi diimplementasikan sebagai subclass ContentProvider dan harus mengimplementasikan seperangkat standar API yang memungkinkan aplikasi lain melakukan transaksi. Untuk informasi selengkapnya, lihat panduan developer Penyedia Materi.
        Aspek unik dari desain sistem Android adalah aplikasi mana pun bisa memulai komponen aplikasi lain. Misalnya, jika Anda menginginkan pengguna mengambil foto dengan kamera perangkat, bisa saja aplikasi lain yang melakukannya dan aplikasi Anda bisa menggunakannya, sebagai ganti mengembangkan aktivitas sendiri untuk mengambil foto. Anda tidak perlu menggabungkan atau bahkan menghubungkan ke kode dari aplikasi kamera. Sebagai gantinya, Anda dapat memulai aktivitas di aplikasi kamera yang berupa aktivitas mengambil sebuah foto. Bila selesai, foto akan dikembalikan ke aplikasi sehingga Anda bisa menggunakannya. Bagi pengguna, kamera seakan menjadi bagian dari aplikasi Anda.

Saat sistem memulai komponen, sistem akan memulai proses untuk aplikasi itu (jika belum berjalan) dan membuat instance class yang diperlukan untuk komponen. Misalnya, jika aplikasi Anda memulai aktivitas dalam aplikasi kamera yang berupa aktivitas mengambil foto, aktivitas itu akan berjalan dalam proses yang dimiliki oleh aplikasi kamera, bukan dalam proses aplikasi Anda. Karenanya, tidak seperti aplikasi di sebagian besar sistem lain, aplikasi Android tidak memiliki titik masuk tunggal (tidak ada main() fungsi).

Karena sistem menjalankan setiap aplikasi dalam proses terpisah dengan izin file yang membatasi akses ke aplikasi lain, aplikasi Anda tidak bisa langsung mengaktifkan komponen dari aplikasi lain. Namun demikian, sistem Android dapat melakukan hal tersebut. Untuk mengaktifkan komponen dalam aplikasi lain, kirim pesan ke sistem yang menetapkan intent Anda untuk memulai komponen tertentu. Selanjutnya sistem akan mengaktifkan komponen untuk Anda.
    </string>

    <string name="isi5">
        <br>Intent adalah objek perpesanan yang bisa Anda gunakan untuk meminta tindakan dari komponen aplikasi. Meskipun intent mempermudah komunikasi antar komponen dengan beberapa cara, ada tiga kasus penggunaan yang mendasar: </br>

Ada dua tipe intent: \n\n

Intent eksplisit menentukan aplikasi mana yang akan memenuhi persyaratan intent, dengan menyediakan nama paket aplikasi target maupun nama class komponen yang sepenuhnya memenuhi syarat. Anda biasanya akan menggunakan intent eksplisit untuk memulai sebuah komponen pada aplikasi Anda sendiri, karena Anda mengetahui nama class dari aktivitas atau layanan yang ingin dimulai. Misalnya, Anda mungkin memulai aktivitas baru pada aplikasi sebagai respons terhadap tindakan pengguna, atau mulai layanan untuk mendownload file di latar belakang.

Intent implisit tidak menetapkan komponen tertentu, melainkan mendeklarasikan tindakan umum yang akan dilakukan, yang memungkinkan komponen aplikasi lain untuk menanganinya. Misalnya, jika ingin menampilkan sebuah lokasi pengguna di peta, Anda bisa menggunakan intent implisit untuk meminta aplikasi lain yang mampu menunjukkan lokasi yang telah ditetapkan di peta tersebut.
    </string>



</resources>
